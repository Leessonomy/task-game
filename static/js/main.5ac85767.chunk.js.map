{"version":3,"sources":["components/Cell/cell.js","store/actions/actions.js","store/actions/action-creators.js","components/Board/board.js","components/App/app.js","serviceWorker.js","helpers/shuffle.js","store/reducers/reducer.js","store/store.js","index.js"],"names":["Cell","color","id","spin","handleChange","className","style","transform","transition","htmlFor","type","value","checked","onChange","e","backgroundColor","actions","GET_CELLS_COLORS","STATUS_CELLS_COLORS","RESET_CELLS","actionCreators","initializeNewCells","setSpinStatus","resetCells","Board","useState","sort","setSort","cells","useSelector","state","game","cellsColors","dispatch","useDispatch","useEffect","gameOver","every","elem","match","some","i","indexOf","window","confirm","location","reload","length","setTimeout","target","content","map","cell","key","App","Boolean","hostname","randomCells","r","temp","newArr","Math","floor","random","initialState","defaultReducer","action","resetArr","n","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5ac85767.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../../index.css\";\r\n\r\nconst Cell = ({ color, id, spin, handleChange }) => {\r\n  return (\r\n    <div\r\n      className=\"card-cell\"\r\n      style={\r\n        spin\r\n          ? { transform: \"rotateY(180deg)\", transition: \"transform 0.6s\" }\r\n          : {}\r\n      }\r\n    >\r\n      <label htmlFor={id} className=\"color-cell\">\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"checkbox\"\r\n          id={id}\r\n          value={color}\r\n          checked={spin}\r\n          onChange={(e) => handleChange(id, e)}\r\n        />\r\n        <div className=\"card-cell-front\">\r\n          <span className=\"card-cell-front-text\">There is color</span>\r\n        </div>\r\n        <div\r\n          className=\"card-cell-back\"\r\n          style={\r\n            spin\r\n              ? { backgroundColor: `${color}` }\r\n              : { backgroundColor: `${color}` }\r\n          }\r\n        >\r\n          <span className=\"card-cell-back-text\">{color}</span>\r\n        </div>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","const actions = {\r\n  GET_CELLS_COLORS: \"GET_CELLS_COLORS\",\r\n  STATUS_CELLS_COLORS: \"STATUS_CELLS_COLORS\",\r\n  RESET_CELLS: \"RESET_CELLS\",\r\n};\r\n\r\nexport default actions;\r\n","import actions from \"./actions\";\r\n\r\nconst actionCreators = {\r\n  initializeNewCells: () => {\r\n    return { type: actions.GET_CELLS_COLORS };\r\n  },\r\n\r\n  setSpinStatus: (id) => {\r\n    return { type: actions.STATUS_CELLS_COLORS, id };\r\n  },\r\n\r\n  resetCells: () => {\r\n    return { type: actions.RESET_CELLS };\r\n  },\r\n};\r\n\r\nexport default actionCreators;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"../../index.css\";\r\nimport Cell from \"../Cell/cell\";\r\nimport actionCreators from \"../../store/actions/action-creators\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst Board = () => {\r\n  const [sort, setSort] = useState([]);\r\n  const cells = useSelector((state) => state.game.cellsColors);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(actionCreators.initializeNewCells());\r\n  }, []); // eslint-disable-line\r\n\r\n  useEffect(() => {\r\n    const gameOver = cells.every((elem) => elem.spin === true);\r\n    const match = sort.some((elem, i) => sort.indexOf(elem) !== i);\r\n    if (gameOver) {\r\n      const conf = window.confirm(\"You won. Do you want to restart the game?\");\r\n      if (conf) {\r\n        window.location.reload();\r\n      }\r\n    }\r\n    if (sort.length > 1) {\r\n      if (!match) {\r\n        setSort([]);\r\n        setTimeout(() => {\r\n          dispatch(actionCreators.resetCells());\r\n        }, 400);\r\n      } else {\r\n        setSort([]);\r\n      }\r\n    }\r\n  }, [sort]); // eslint-disable-line\r\n\r\n  const handleChange = (id, e) => {\r\n    if (e.target.checked) {\r\n      setSort([...sort, e.target.value]);\r\n      dispatch(actionCreators.setSpinStatus(id));\r\n    }\r\n  };\r\n\r\n  const content = cells.map((cell, i) => {\r\n    return (\r\n      <Cell\r\n        color={cell.color}\r\n        id={i}\r\n        key={i}\r\n        spin={cell.spin}\r\n        handleChange={handleChange}\r\n      />\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"section-wrapper\">\r\n      <h2 className=\"description\">\r\n        You have to make eight pairs of cards of the same colors\r\n      </h2>\r\n      <section className=\"board-content\">{content}</section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\nimport \"../../index.css\";\nimport Board from \"../Board/board\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","function randomCells(cellsColors) {\r\n  let newArr = [...cellsColors, ...cellsColors];\r\n  let i = newArr.length;\r\n  let r;\r\n  let temp;\r\n  while (i--) {\r\n    r = Math.floor(Math.random() * (i + 1));\r\n\r\n    temp = newArr[i];\r\n    newArr[i] = newArr[r];\r\n    newArr[r] = temp;\r\n  }\r\n\r\n  return newArr;\r\n}\r\n\r\nexport default randomCells;\r\n","import actions from \"../actions/actions\";\r\nimport randomCells from \"../../helpers/shuffle\";\r\n\r\nconst initialState = {\r\n  cellsColors: [\r\n    \"red\",\r\n    \"yellow\",\r\n    \"blue\",\r\n    \"orange\",\r\n    \"purple\",\r\n    \"gray\",\r\n    \"green\",\r\n    \"pink\",\r\n  ].map((color) => ({\r\n    color: color,\r\n    spin: false,\r\n  })),\r\n};\r\n\r\nconst defaultReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actions.GET_CELLS_COLORS:\r\n      return {\r\n        ...state,\r\n        cellsColors: randomCells(state.cellsColors),\r\n      };\r\n    case actions.STATUS_CELLS_COLORS:\r\n      let newArr = [...state.cellsColors];\r\n      newArr[action.id] = { ...newArr[action.id], spin: true };\r\n      return {\r\n        ...state,\r\n        cellsColors: newArr,\r\n      };\r\n\r\n    case actions.RESET_CELLS:\r\n      const resetArr = state.cellsColors.map((n) => {\r\n        return { ...n, spin: false };\r\n      });\r\n      return {\r\n        ...state,\r\n        cellsColors: resetArr,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default defaultReducer;\r\n","import defaultReducer from \"./reducers/reducer\";\r\nimport { combineReducers, createStore } from \"redux\";\r\n\r\nconst reducer = combineReducers({\r\n  game: defaultReducer,\r\n});\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/app\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}